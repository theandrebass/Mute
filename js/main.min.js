"use strict";var $=document.querySelector.bind(document),$$=document.querySelectorAll.bind(document),MuteUtils={eventAdder:function(t,e,n){for(var r=$$(t)||[],o=r.length,c=0;c<o;c++)r[c].addEventListener(e,n);return r},extendObject:function(t,e){return Object.keys(e).forEach(function(n){t[n]=e[n]}),t},getLocation:function(t){var e=t.getBoundingClientRect();return extendObject(e,{width:e.right-e.left,height:e.bottom-e.top}),e},nodeListToArray:function(t){return Array.prototype.slice.call(t)}};
"use strict";var Mute={muteMode:0,exemptDomains:[],currentDomain:null,el:{excludeOnButton:$(".excluder .on"),excludeOffButton:$(".excluder .off"),muteButton:$(".muter .mute"),stopButton:$(".muter .stop")},ev:{"click .excluder .on":"excludeSite","click .excluder .off":"includeSite","click .muter .mute":"setMute","click .muter .stop":"setStop"},f:{setDomainName:function(e){var t=void 0;chrome.tabs.query({active:!0,lastFocusedWindow:!0},function(u){t=u[0].url;var n=document.createElement("a");n.setAttribute("href",t),Mute.currentDomain=n.hostname,e&&e()})},toast:function(e){},excludeSite:function(e){Mute.currentDomain&&Mute.exemptDomains.indexOf(Mute.currentDomain)==-1&&Mute.exemptDomains.push(Mute.currentDomain),this.setSettings(),this.render()},includeSite:function(e){if(Mute.currentDomain){var t=Mute.exemptDomains.indexOf(Mute.currentDomain);t>-1&&Mute.exemptDomains.splice(t,1),this.setSettings(),this.render()}},setMute:function(e){Mute.muteMode=0,this.setSettings(),this.render()},setStop:function(e){Mute.muteMode=1,this.setSettings(),this.render()},render:function(){switch(Mute.muteMode){case 0:Mute.el.stopButton.classList.remove("active"),Mute.el.muteButton.classList.add("active");break;case 1:Mute.el.muteButton.classList.remove("active"),Mute.el.stopButton.classList.add("active")}Mute.currentDomain&&Mute.exemptDomains.indexOf(Mute.currentDomain)>-1?(Mute.el.excludeOffButton.classList.remove("active"),Mute.el.excludeOnButton.classList.add("active")):(Mute.el.excludeOnButton.classList.remove("active"),Mute.el.excludeOffButton.classList.add("active"))},getSettings:function(e){return chrome.storage.sync.get({muteMode:0,exemptDomains:[]},function(t){Mute.muteMode=t.muteMode,Mute.exemptDomains=t.exemptDomains,e&&e()}),{muteMode:Mute.muteMode,exemptDomains:Mute.exemptDomains}},setSettings:function(e){chrome.storage.sync.set({muteMode:Mute.muteMode,exemptDomains:Mute.exemptDomains},function(){this.toast("Saved!")}.bind(this)),e&&e(),Mute.f.sendMessage()},sendMessage:function(e){var t=this;chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendMessage(e[0].id,t.getSettings())})}}};Mute.init=function(){Object.keys(Mute.ev).forEach(function(e){var t=e.split(" ")[0],u=e.split(" ").splice(1).join(" "),n=Mute.f[Mute.ev[e]].bind(Mute.f);MuteUtils.eventAdder(u,t,n)}),Mute.f.getSettings(Mute.f.render.bind(Mute.f)),setTimeout(Mute.f.render.bind(Mute.f),10),Mute.f.setDomainName(),console.info("Mute initialized")},Mute.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYmluZCIsIiQkIiwicXVlcnlTZWxlY3RvckFsbCIsIk11dGVVdGlscyIsInNlbGVjdG9yIiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJ0TGVuZ3RoIiwidGFyZ2V0cyIsImV2ZW50QWRkZXIiLCJsZW5ndGgiLCJpIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV4dGVuZE9iamVjdCIsIm9iaiIsImVsIiwiZm9yRWFjaCIsImtleSIsImdldExvY2F0aW9uIiwiYm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIndpZHRoIiwicmlnaHQiLCJub2RlTGlzdFRvQXJyYXkiLCJub2RlTGlzdCIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiTXV0ZSIsIm11dGVNb2RlIiwiZXhlbXB0RG9tYWlucyIsImV4Y2x1ZGVPbkJ1dHRvbiIsImV4Y2x1ZGVPZmZCdXR0b24iLCJldiIsImNsaWNrIC5leGNsdWRlciAub24iLCJjbGljayAuZXhjbHVkZXIgLm9mZiIsImNsaWNrIC5tdXRlciAubXV0ZSIsImNsaWNrIC5tdXRlciAuc3RvcCIsImYiLCJzZXREb21haW5OYW1lIiwiY2hyb21lIiwidGFicyIsInF1ZXJ5IiwidXJsIiwiY3JlYXRlRWxlbWVudCIsImEiLCJzZXRBdHRyaWJ1dGUiLCJjdXJyZW50RG9tYWluIiwidG9hc3QiLCJtZXNzYWdlIiwiZXhjbHVkZVNpdGUiLCJldnQiLCJpbmRleE9mIiwicHVzaCIsInRoaXMiLCJyZW5kZXIiLCJpbmNsdWRlU2l0ZSIsImluZGV4Iiwic3BsaWNlIiwic2V0TXV0ZSIsInNldFN0b3AiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJtdXRlQnV0dG9uIiwiYWRkIiwic3RvcEJ1dHRvbiIsImdldFNldHRpbmdzIiwic3RvcmFnZSIsInN5bmMiLCJnZXQiLCJyZWNvcmQiLCJzZXRTZXR0aW5ncyIsInNldCIsInNlbmRNZXNzYWdlIiwiX3RoaXMiLCJjdXJyZW50V2luZG93IiwiaWQiLCJpbml0IiwiT2JqZWN0Iiwia2V5cyIsImlkZW50aWZpZXIiLCJzcGxpdCIsImpvaW4iLCJmbiIsInNldFRpbWVvdXQiLCJjb25zb2xlIl0sIm1hcHBpbmdzIjoiWUFBQSxJQUFJQSxHQUFJQyxTQUFTQyxjQUFjQyxLQUFLRixVQUNoQ0csR0FBS0gsU0FBU0ksaUJBQWlCRixLQUFLRixVQUFwQ0csV0FFQUUsV0FBWSxTQUFBQyxFQUFBQyxFQUFBQyxHQUdSLElBQ0lDLEdBREFDLEdBQVVQLEdBQUdHLE9BRHJCSyxFQUFZRCxFQUFBRSxPQUVKSCxFQUFBQSxFQUFVQyxFQUFBQSxFQURkRyxJQUlJSCxFQUFRRyxHQUFHQyxpQkFBaUJQLEVBQVdDLEVBQzFDLE9BQUFFLElBR0pLLGFBWFcsU0FBQUMsRUFBQUMsR0FpQlAsTUFKTEYsUUFBQUEsS0FBY0UsR0FBQUMsUUFBQSxTQUFTRixHQUdmQSxFQUFJRyxHQUFPRixFQUFHRSxLQURsQkgsR0FRSkksWUFBYSxTQUFTSCxHQUVsQixHQUFJSSxHQUFxQkosRUFBR0ssdUJBTzVCLE9BTEFQLGNBQWFNLEdBQWJOLE1BQUFBLEVBQWFNLE1BQW9CQSxFQUFBRSxLQUM3QkMsT0FBT0gsRUFBbUJJLE9BQVFKLEVBQW1CRSxNQUlsREYsR0FJWEssZ0JBQWlCLFNBQUFDLEdBQ2IsTUFBT0MsT0FBTUMsVUFBVUMsTUFBTUMsS0FBS0o7WUN4QzFDLElBQUlLLE9BRUFDLFNBQUEsRUFDQUMsaUJBQ0FELGNBSk8sS0FTUGhCLElBREFrQixnQkFBQXBDLEVBQUEsaUJBQ0lxQyxpQkFBQXJDLEVBQUEsa0JBQ0FvQyxXQUFBQSxFQUFBQSxnQkFDQUMsV0FBQUEsRUFBQUEsaUJBTUpDLElBREFDLHNCQUFBLGNBQ0lDLHVCQUFBLGNBQ0FDLHFCQUFBLFVBQ0FDLHFCQUFBLFdBTUpDLEdBREFDLGNBQUEsU0FBQW5DLEdBRUltQyxHQUFBQSxHQUFBQSxNQUNJQyxRQUFBQyxLQUFBQyxPQUNJQyxRQUFBQSxFQUNKSCxtQkFBa0IsR0FDZCxTQUFBQyxHQUNBRSxFQUFBRixFQUFBLEdBQUFFLEdBRUFBLElBQUFBLEdBQU1GLFNBQU5HLGNBQUEsSUFHQUMsR0FBRUMsYUFBYSxPQUFRSCxHQUR2QmYsS0FBSWlCLGNBQWFELEVBQUFBLFNBRWpCaEIsR0FBS21CLE9BSVpDLE1BaEJGLFNBQUFDLEtBb0JFQyxZQXBCRixTQUFBQyxHQXVCU3ZCLEtBQUttQixlQUFpQm5CLEtBQUtFLGNBQWNzQixRQUFReEIsS0FBS21CLGlCQUFrQixHQUFJbkIsS0FBS0UsY0FBY3VCLEtBQUt6QixLQUFLbUIsZUFBN0dPLEtBQUkxQixjQUdKMEIsS0FBS0MsVUFDUkMsWUEzQkYsU0FBQUwsR0E4QkssR0FBS3ZCLEtBQUttQixjQUFWLENBQUEsR0FBSVUsR0FBTVYsS0FBQUEsY0FBZUssUUFBQXhCLEtBQUFtQixjQUdyQlUsSUFBUSxHQUFJN0IsS0FBS0UsY0FBYzRCLE9BQU9ELEVBQU8sR0FBakRILEtBQUlHLGNBR0pILEtBQUtDLFdBQ1JJLFFBckNGLFNBQUFSLEdBd0NLdkIsS0FBS0MsU0FBVyxFQUFoQkQsS0FBS0MsY0FHTHlCLEtBQUtDLFVBQ1JLLFFBNUNGLFNBQUFULEdBK0NLdkIsS0FBS0MsU0FBVyxFQUFoQkQsS0FBS0MsY0FHTHlCLEtBQUtDLFVBQ1JBLE9BbkRGLFdBc0RLLE9BQVEzQixLQUFLQyxVQURULElBQUEsR0FDSUQsS0FBS0MsR0FBQUEsV0FBYmdDLFVBQUFDLE9BQUEsVUFDSWxDLEtBQUFmLEdBQUFrRCxXQUFBRixVQUFBRyxJQUFBLFNBQ0lwQyxNQUNBQSxLQUFBQSxHQUNBQSxLQUFBZixHQUFBa0QsV0FBQUYsVUFBQUMsT0FBQSxVQUNKbEMsS0FBQWYsR0FBQW9ELFdBQUFKLFVBQUFHLElBQUEsVUFMSnBDLEtBQUFtQixlQUFBbkIsS0FBQUUsY0FBQXNCLFFBQUF4QixLQUFBbUIsZ0JBQUEsR0FZSW5CLEtBQUtmLEdBQUdtQixpQkFBaUI2QixVQUFVQyxPQUFPLFVBRDFDbEMsS0FBS21CLEdBQUFBLGdCQUFpQm5CLFVBQUtFLElBQUFBLFlBRTNCRixLQUFLZixHQUFHa0IsZ0JBQWdCOEIsVUFBVUcsT0FBSSxVQUYxQ3BDLEtBR09mLEdBQUFtQixpQkFBQTZCLFVBQUFHLElBQUEsWUFJVkUsWUF4RUYsU0FBQTlELEdBbUZNLE1BUkRvQyxRQUFPMkIsUUFBUUMsS0FBS0MsS0FEeEJILFNBQWEsRUFDVDFCLGtCQUNJWCxTQUFBQSxHQUNBQyxLQUFBQSxTQUFld0MsRUFBQXpDLFNBQ2hCRCxLQUFBRSxjQUFVd0MsRUFBQXhDLGNBRVRGLEdBQUtFLE9BTUxELFNBQVVELEtBQUtDLFNBRG5CQyxjQUFPRixLQUFBRSxnQkFJVnlDLFlBekZGLFNBQUFuRSxHQTRGR29DLE9BQU8yQixRQUFRQyxLQUFLSSxLQUR0QkQsU0FBYTNDLEtBQUFDLFNBQ1hXLGNBQWU0QixLQUFLSSxlQUNoQjNDLFdBQ0FDLEtBQUFBLE1BQUFBLFdBRm9CaEMsS0FHckJ3RCxPQUVEeEQsR0FMRk0sSUFVQXdCLEtBQUtVLEVBQUVtQyxlQUNSQSxZQXZHRixTQUFBeEIsR0FBQSxHQUFBeUIsR0FBQXBCLElBMEdLZCxRQUFPQyxLQUFLQyxPQURoQitCLFFBQWEsRUFBa0JFLGVBQUEsR0FJeEIsU0FBQWxDLEdBSEhELE9BQUFDLEtBQVlDLFlBQU1ELEVBQUEsR0FBQW1DLEdBQUFGLEVBQUFSLG1CQTFHdkJ0QyxNQUFBaUQsS0FBQSxXQXdISEMsT0FBT0MsS0FBS25ELEtBQUtLLElBQUluQixRQUFRLFNBQVNrRSxHQUhyQ0gsR0FBTzFFLEdBQVc2RSxFQUFBQyxNQUFBLEtBQUEsR0FLWC9FLEVBQVc4RSxFQUFXQyxNQUFNLEtBQUt2QixPQUFPLEdBQUd3QixLQUFLLEtBSHhEQyxFQUFBdkQsS0FBQVUsRUFBQVYsS0FBQUssR0FBQStDLElBQUFsRixLQUFBOEIsS0FBQVUsRUFFSXJDLFdBQUlFLFdBQVk2RSxFQUFXQyxFQUEzQkUsS0FJQWxGLEtBQUFBLEVBQUFBLFlBQVVNLEtBQVYrQixFQUFxQnBDLE9BQXJCSixLQUErQkssS0FBQUEsSUFDbENpRixXQU5EeEQsS0FBQVUsRUFBQWlCLE9BQUF6RCxLQUFBOEIsS0FBQVUsR0FBQSxJQVFBVixLQUFBVSxFQUFBQyxnQkFFQTZDLFFBQUFBLEtBQVd4RCxxQkFJWHlELEtBQUFBIiwiZmlsZSI6ImpzL21haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyICQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yLmJpbmQoZG9jdW1lbnQpLFxuICAgICQkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbC5iaW5kKGRvY3VtZW50KTtcblxudmFyIE11dGVVdGlscyA9IHtcblxuICAgIGV2ZW50QWRkZXI6IGZ1bmN0aW9uKHNlbGVjdG9yLCBldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB0YXJnZXRzID0gJCQoc2VsZWN0b3IpIHx8IFtdLFxuICAgICAgICAgICAgdExlbmd0aCA9IHRhcmdldHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0YXJnZXRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0cztcbiAgICB9LFxuXG4gICAgZXh0ZW5kT2JqZWN0OiBmdW5jdGlvbihvYmosIGVsKSB7XG5cbiAgICAgICAgT2JqZWN0LmtleXMoZWwpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IGVsW2tleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvYmo7XG5cbiAgICB9LFxuXG4gICAgZ2V0TG9jYXRpb246IGZ1bmN0aW9uKGVsKSB7XG5cbiAgICAgICAgdmFyIGJvdW5kaW5nQ2xpZW50UmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGV4dGVuZE9iamVjdChib3VuZGluZ0NsaWVudFJlY3QsIHtcbiAgICAgICAgICAgIHdpZHRoOiBib3VuZGluZ0NsaWVudFJlY3QucmlnaHQgLSBib3VuZGluZ0NsaWVudFJlY3QubGVmdCxcbiAgICAgICAgICAgIGhlaWdodDogYm91bmRpbmdDbGllbnRSZWN0LmJvdHRvbSAtIGJvdW5kaW5nQ2xpZW50UmVjdC50b3BcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGJvdW5kaW5nQ2xpZW50UmVjdDtcblxuICAgIH0sXG5cbiAgICBub2RlTGlzdFRvQXJyYXk6IGZ1bmN0aW9uKG5vZGVMaXN0KSB7XG4gICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChub2RlTGlzdCk7XG4gICAgfVxuXG59O1xuIiwidmFyIE11dGUgPSB7XG5cbiAgICAvLyBtdXRlTW9kZSAwIGlzIGp1c3QgbXV0ZSxcbiAgICAvLyBtdXRlTW9kZSAxIGlzIG11dGUgYW5kIHN0b3BcbiAgICBtdXRlTW9kZTogMCxcbiAgICBleGVtcHREb21haW5zOiBbXSxcbiAgICBjdXJyZW50RG9tYWluOiBudWxsLFxuXG4gICAgLy8gZWxlbWVudHNcbiAgICBlbDoge1xuICAgICAgICBleGNsdWRlT25CdXR0b246ICQoXCIuZXhjbHVkZXIgLm9uXCIpLFxuICAgICAgICBleGNsdWRlT2ZmQnV0dG9uOiAkKFwiLmV4Y2x1ZGVyIC5vZmZcIiksXG4gICAgICAgIG11dGVCdXR0b246ICQoXCIubXV0ZXIgLm11dGVcIiksXG4gICAgICAgIHN0b3BCdXR0b246ICQoXCIubXV0ZXIgLnN0b3BcIilcbiAgICB9LFxuXG4gICAgLy8gZXZlbnRzXG4gICAgZXY6IHtcbiAgICAgICAgXCJjbGljayAuZXhjbHVkZXIgLm9uXCI6IFwiZXhjbHVkZVNpdGVcIixcbiAgICAgICAgXCJjbGljayAuZXhjbHVkZXIgLm9mZlwiOiBcImluY2x1ZGVTaXRlXCIsXG4gICAgICAgIFwiY2xpY2sgLm11dGVyIC5tdXRlXCI6IFwic2V0TXV0ZVwiLFxuICAgICAgICBcImNsaWNrIC5tdXRlciAuc3RvcFwiOiBcInNldFN0b3BcIlxuICAgIH0sXG5cbiAgICAvLyBmdW5jdGlvbnNcbiAgICBmOiB7XG4gICAgICAgIHNldERvbWFpbk5hbWU6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBnZXQgd2luZG93IGRvbWFpbiBuYW1lXG4gICAgICAgICAgICBsZXQgdXJsO1xuICAgICAgICAgICAgY2hyb21lLnRhYnMucXVlcnkoe1xuICAgICAgICAgICAgICAgIFwiYWN0aXZlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJsYXN0Rm9jdXNlZFdpbmRvd1wiOiB0cnVlXG4gICAgICAgICAgICB9LCB0YWJzID0+IHtcbiAgICAgICAgICAgICAgICB1cmwgPSB0YWJzWzBdLnVybDtcblxuICAgICAgICAgICAgICAgIGxldCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCdocmVmJywgdXJsKTtcbiAgICAgICAgICAgICAgICBNdXRlLmN1cnJlbnREb21haW4gPSBhLmhvc3RuYW1lO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9hc3Q6IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgLy8gcG9wIHVwIGEgdG9hc3RcbiAgICAgICAgfSxcblxuICAgICAgICBleGNsdWRlU2l0ZTogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICBpZiAoTXV0ZS5jdXJyZW50RG9tYWluICYmIE11dGUuZXhlbXB0RG9tYWlucy5pbmRleE9mKE11dGUuY3VycmVudERvbWFpbikgPT0gLTEpIE11dGUuZXhlbXB0RG9tYWlucy5wdXNoKE11dGUuY3VycmVudERvbWFpbik7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U2V0dGluZ3MoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5jbHVkZVNpdGU6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgaWYgKCFNdXRlLmN1cnJlbnREb21haW4pIHJldHVybjtcblxuICAgICAgICAgICAgdmFyIGluZGV4ID0gTXV0ZS5leGVtcHREb21haW5zLmluZGV4T2YoTXV0ZS5jdXJyZW50RG9tYWluKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSBNdXRlLmV4ZW1wdERvbWFpbnMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRTZXR0aW5ncygpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRNdXRlOiBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIE11dGUubXV0ZU1vZGUgPSAwO1xuXG4gICAgICAgICAgICB0aGlzLnNldFNldHRpbmdzKCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFN0b3A6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgTXV0ZS5tdXRlTW9kZSA9IDE7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0U2V0dGluZ3MoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoTXV0ZS5tdXRlTW9kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgTXV0ZS5lbC5zdG9wQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgICAgIE11dGUuZWwubXV0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIE11dGUuZWwubXV0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgICAgICAgICAgICAgICAgICBNdXRlLmVsLnN0b3BCdXR0b24uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChNdXRlLmN1cnJlbnREb21haW4gJiYgTXV0ZS5leGVtcHREb21haW5zLmluZGV4T2YoTXV0ZS5jdXJyZW50RG9tYWluKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgTXV0ZS5lbC5leGNsdWRlT2ZmQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgTXV0ZS5lbC5leGNsdWRlT25CdXR0b24uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgTXV0ZS5lbC5leGNsdWRlT25CdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICBNdXRlLmVsLmV4Y2x1ZGVPZmZCdXR0b24uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTZXR0aW5nczogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KHtcbiAgICAgICAgICAgICAgICBtdXRlTW9kZTogMCxcbiAgICAgICAgICAgICAgICBleGVtcHREb21haW5zOiBbXVxuICAgICAgICAgICAgfSwgcmVjb3JkID0+IHtcbiAgICAgICAgICAgICAgICBNdXRlLm11dGVNb2RlID0gcmVjb3JkLm11dGVNb2RlO1xuICAgICAgICAgICAgICAgIE11dGUuZXhlbXB0RG9tYWlucyA9IHJlY29yZC5leGVtcHREb21haW5zO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbXV0ZU1vZGU6IE11dGUubXV0ZU1vZGUsXG4gICAgICAgICAgICAgICAgZXhlbXB0RG9tYWluczogTXV0ZS5leGVtcHREb21haW5zXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFNldHRpbmdzOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtcbiAgICAgICAgICAgICAgbXV0ZU1vZGU6IE11dGUubXV0ZU1vZGUsXG4gICAgICAgICAgICAgIGV4ZW1wdERvbWFpbnM6IE11dGUuZXhlbXB0RG9tYWluc1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIHRoaXMudG9hc3QoXCJTYXZlZCFcIilcbiAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuXG4gICAgICAgICAgLy8gdHJhbnNmZXJyaW5nIGNvbW11bmljYWJsZSBkYXRhIGFib3V0IGVhY2ggc2l0ZVxuICAgICAgICAgIE11dGUuZi5zZW5kTWVzc2FnZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlbmRNZXNzYWdlOiBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICAgICBjaHJvbWUudGFicy5xdWVyeSh7XG4gICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRXaW5kb3c6IHRydWVcbiAgICAgICAgICAgIH0sIHRhYnMgPT4ge1xuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYnNbMF0uaWQsIHRoaXMuZ2V0U2V0dGluZ3MoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxufTtcblxuTXV0ZS5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgT2JqZWN0LmtleXMoTXV0ZS5ldikuZm9yRWFjaChmdW5jdGlvbihpZGVudGlmaWVyKSB7XG4gICAgICAgIHZhciBldmVudE5hbWUgPSBpZGVudGlmaWVyLnNwbGl0KFwiIFwiKVswXSxcbiAgICAgICAgICAgIHNlbGVjdG9yID0gaWRlbnRpZmllci5zcGxpdChcIiBcIikuc3BsaWNlKDEpLmpvaW4oXCIgXCIpLFxuICAgICAgICAgICAgZm4gPSBNdXRlLmZbTXV0ZS5ldltpZGVudGlmaWVyXV0uYmluZChNdXRlLmYpO1xuXG4gICAgICAgIE11dGVVdGlscy5ldmVudEFkZGVyKHNlbGVjdG9yLCBldmVudE5hbWUsIGZuKTtcbiAgICB9KTtcblxuICAgIC8vIHJlYWQgYW5kIGFwcGx5IHNldHRpbmdzIC0tIHJlbmRlciBpcyBiZWluZyB3ZWlyZFxuICAgIE11dGUuZi5nZXRTZXR0aW5ncyhNdXRlLmYucmVuZGVyLmJpbmQoTXV0ZS5mKSk7XG4gICAgc2V0VGltZW91dChNdXRlLmYucmVuZGVyLmJpbmQoTXV0ZS5mKSwgMTApO1xuXG4gICAgTXV0ZS5mLnNldERvbWFpbk5hbWUoKTtcblxuICAgIGNvbnNvbGUuaW5mbyhcIk11dGUgaW5pdGlhbGl6ZWRcIik7XG5cbn07XG5cbk11dGUuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
